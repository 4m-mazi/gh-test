name: Renovate
on:
  push:
    branches: ["main"]
  # This lets you dispatch a renovate job with different cache options if you want to reset or disable the cache manually.
  workflow_dispatch:
    inputs:
      repoCache:
        description: "Reset or disable the cache?"
        type: choice
        default: enabled
        options:
          - enabled
          - disabled
          - reset
  schedule:
    # Run every 30 minutes:
    - cron: "0,30 * * * *"

# Adding these as env variables makes it easy to re-use them in different steps and in bash.
env:
  cache_archive: renovate_cache.tar.gz
  # This is the dir renovate provides -- if we set our own directory via cacheDir, we can run into permissions issues.
  # It is also possible to cache a higher level of the directory, but it has minimal benefit. While renovate execution
  # time gets faster, it also takes longer to upload the cache as it grows bigger.
  cache_dir: /tmp/renovate/cache/renovate/repository
  # This can be manually changed to bust the cache if neccessary.
  cache_key: renovate-cache
  # tool versions
  # renovate: datasource=docker depName=renovate packageName=ghcr.io/renovatebot/renovate pinDigests=false
  RENOVATE_VERSION: 37.361.0

jobs:
  renovate:
    name: Renovate
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5

      # This third party action allows you to download the cache artifact from different workflow runs
      # Note that actions/cache doesn't work well because the cache key would need to be computed from
      # a file within the cache, meaning there would never be any data to restore. With other keys, the
      # cache wouldn't necessarily upload when it changes. actions/download-artifact also doesn't work
      # because it only handles artifacts uploaded in the same run, and we want to restore from the
      # previous successful run.
      - uses: actions/cache/restore@v4.0.2
        id: restore-cache
        if: github.event.inputs.repoCache != 'disabled'
        continue-on-error: true
        with:
          key: ${{ env.cache_key }}
          path: ${{ env.cache_dir }}

      - run: tree $cache_dir
        continue-on-error: true

      - run: sudo chown -R runneradmin:root /tmp/renovate/
        continue-on-error: true

      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@a0de6af83968303c8c955486bf9739a57d23c7f1 # v1.10.0
        with:
          app-id: ${{ vars.MAZI_RENOVATE_APP_ID }}
          private-key: ${{ secrets.MAZI_RENOVATE_PRIVATE_KEY }}

      - uses: renovatebot/github-action@063e0c946b9c1af35ef3450efc44114925d6e8e6 # v40.1.11
        with:
          configurationFile: .github/renovate.json
          token: ${{ steps.generate_token.outputs.token }}
          renovate-version: ${{ env.RENOVATE_VERSION }}
        env:
          # This enables the cache -- if this is set, it's not necessary to add it to renovate.json.
          RENOVATE_REPOSITORY_CACHE: ${{ github.event.inputs.repoCache || 'enabled' }}
          LOG_LEVEL: ${{ vars.LOG_LEVEL }}
          RENOVATE_AUTODISCOVER: true
          RENOVATE_AUTODISCOVER_FILTER: "${{ github.repository }}"

      - name: delete old cache
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: gh cache delete ${{ steps.restore-cache.outputs.cache-primary-key }}
        continue-on-error: true
      - uses: actions/cache/save@v4.0.2
        if: github.event.inputs.repoCache != 'disabled'
        with:
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
          path: ${{ env.cache_dir }}

